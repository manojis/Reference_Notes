destory() is part of servlet life cycle methods, it is used to kill the servlet instance. Servlet Engine is used to call destory(). In case, if you call destory method from service(), it just execute the code written in the destory(), but it wont kill the servlet instance. destroy() will be called before killing the servlet instance by servlet engine.

We cannot override static methods. Static methods belongs to class, not belongs to object. Inheritance will not be applicable for class members.

List of Java Object methods:-
============================
clone() - Creates and returns a copy of this object.
	equals() - Indicates whether some other object is "equal to" this one.
	finalize() - Called by the garbage collector on an object when garbage collection
			determines that there are no more references to the object.
	getClass() - Returns the runtime class of an object.
	hashCode() - Returns a hash code value for the object.
	notify() - Wakes up a single thread that is waiting on this object's monitor.
	notifyAll() - Wakes up all threads that are waiting on this object's monitor.
	toString() - Returns a string representation of the object.
	wait() - Causes current thread to wait until another thread invokes the notify() method
			or the notifyAll() method for this object.


Enumerator are only good for traversing but using iterator we can manipulate the collections as well.

We cannot override static methods. Static methods are belogs to class, not belongs to object. Inheritance will not be applicable for class members
By specifying final keyword to the method you can avoid overriding

Transient variables cannot be serialized. During serialization process, transient variable states will not be serialized. State of the value will be always defaulted after deserialization.

A  fail-fast system is nothing but immediately report any failure that is likely to lead to failure. When a problem occurs, a fail-fast system fails immediately. In Java, we can find this behavior with iterators.Incase, you have called iterator on a collection object, and another thread tries to modify the collection object, then concurrent modification exception will be thrown. This is called fail-fast.

Constructor cannot be synchronized. Because constructor is used for instantiating object, when we are in constructor object is under creation. So, until object is not instantiated it does not need any synchronization.

Two types of webservices:
Soap and Restful

Three types of webservice components:
Soap,WDSL,UDDI

Soap: platform independent and language independent, uses xml format.
Has its own security called ws security. really slow to read and parse.uses services interfaces to expose the business logic.defines stadards which needs to be strictly followed.

Restful - any language and platform, fast and consumes less bandwidth and resource, permits different data formats.uses uri to expose business logic.Restful uses underlying transport layer as security.

java webservices api:
JAXWS AND JAXRS

JAX-WS: soap, RPC style and document style.
JAX-RS: Restful, two types- Jersey and RestEasy.

Compile time classpath vs Runtime Classpath:-

So, what is a classpath? A set of all the classes (and jars with classes) that are required by your application. But there are two, or actually three distinct classpaths:

compile-time classpath. Contains the classes that you’ve added in your IDE (assuming you use an IDE) in order to compile your code. In other words, this is the classpath passed to “javac” (though you may be using another compiler).
runtime classpath. Contains the classes that are used when your application is running. That’s the classpath passed to the “java” executable. In the case of web apps this is your /lib folder, plus any other jars provided by the application server/servlet container
test classpath – this is also a sort of runtime classpath, but it is used when you run tests. Tests do not run inside your application server/servlet container, so their classpath is a bit different
Maven defines dependency scopes that are really useful for explaining the differences between the different types of classpaths. Read the short description of each scope.

Many people assume that if they successfully compiled the application with a given jar file present, it means that the application will run fine. But it doesn’t – you need the same jars that you used to compile your application to be present on your runtime classpath as well. Well, not necessarily all of them, and not necessarily only them. A few examples:

you compile the code with a given library on the compile-time classpath, but forget to add it to the runtime classpath. The JVM throws NoClasDefFoundError, which means that a class is missing, which was present when the code was compiled. This error is a clear sign that you are missing a jar file on your runtime classpath that you have on your compile-time classpath. It is also possible that a jar you depend on in turn depends on a jar that you don’t have anywhere. That’s why libraries (must) have their dependencies declared, so that you know which jars to put on your runtime classpath
containers (servlet containers, application servers) have some libraries built-in. Normally you can’t override the built-in dependencies, and even when you can, it requires additional configuration. So, for example, you use Tomcat, which provides the servlet-api.jar. You compile your application with the servlet-api.jar on your compile-time classpath, so that you can use HttpServletRequest in your classes, but do not include it in your WEB-INF/lib folder, because tomcat will put its own jar in the runtime classpath. If you duplicate the dependency, you may get bizarre results, as classloaders get confused.
a framework you are using (let’s say spring-mvc) relies on another library to do JSON serialization (usually Jackson). You don’t actually need Jackson on your compile-time classpath, because you are not referring to any of its classes or even spring classes that refer to them. But spring needs Jackson internally, so the jackson jar must be in WEB-INF/lib (runtime classpath) for JSON serialization to work.
The cases might be complicated even further, when you consider compile-time constants and version mismatches, but the general point is this: the classpaths that you use for compiling and for running the application are different, and you should be aware of that.

Compile-time dependency: You need the dependency in your CLASSPATH to compile your artifact. They are produced because you have some kind of "reference" to the dependency hardcoded in your code, such as calling new for some class, extending or implementing something (either directly or indirectly), or a method call using the direct reference.method() notation.
Run-time dependency: You need the dependency in your CLASSPATH to run your artifact. They are produced because you execute code that accesses the dependency (either in a hardcoded way or via reflection or whatever).
Although compile-time dependency usually implies run-time dependency, you can have a compile-time only dependency. This is based on the fact that Java only links class dependencies on first access to that class, so if you never access a particular class at run-time because a code path is never traversed, Java will ignore both the class and its dependencies.

Example of this

In C.java (generates C.class):

package dependencies;
public class C { }
In A.java (generates A.class):

package dependencies;
public class A {
    public static class B {
        public String toString() {
            C c = new C();
            return c.toString();
        }
    }
    public static void main(String[] args) {
        if (args.length > 0) {
            B b = new B();
            System.out.println(b.toString());
        }
    }
}
In this case, A has a compile-time dependency on C through B, but it will only have a run-time dependency on C if you pass some parameters when executing java dependencies.A, as the JVM will only try to solve B's dependency on C when it gets to execute B b = new B(). This feature allows you to provide at runtime only the dependencies of the classes that you use in your code paths, and ignore the dependencies of the rest of the classes in the artifact.

The compiler needs the right classpath in order to compile calls to a library (compile time dependencies)

The JVM needs the right classpath in order to load the classes in the library you are calling (runtime dependencies).

They may be different in a couple of ways:

1) if your class C1 calls library class L1, and L1 calls library class L2, then C1 has a runtime dependency on L1 and L2, but only a compile time dependency on L1.

2) if your class C1 dynamically instantiates an interface I1 using Class.forName() or some other mechanism, and the implementing class for interface I1 is class L1, then C1 has a runtime dependency on I1 and L1, but only a compile time dependency on I1.

Other "indirect" dependencies which are the same for compile-time and run-time:

3) your class C1 extends library class L1, and L1 implements interface I1 and extends library class L2: C1 has a compile-time dependency on L1, L2, and I1.

4) your class C1 has a method foo(I1 i1) and a method bar(L1 l1) where I1 is an interface and L1 is a class that takes a parameter which is interface I1: C1 has a compile-time dependency on I1 and L1.

Basically, to do anything interesting, your class needs to interface with other classes and interfaces in the classpath. The class/interface graph formed by that set of library interfaces yields the compile-time dependency chain. The library implementations yield the run-time dependency chain. Note that the run-time dependency chain is run-time dependent or fail-slow: if the implementation of L1 sometimes depends on instantiating an object of class L2, and that class only gets instantiated in one particular scenario, then there's no dependency except in that scenario

--->>>  A compile-time dependency is generally required at runtime. In maven, a compile scoped dependency will be added to the classpath on runtime (e.g. in wars they will be copied to WEB-INF/lib).

----->>>> It is not, however, strictly required; for instance, we may compile against a certain API, making it a compile-time dependency, but then at runtime include an implementation that also includes the API.

There may be fringe cases where the project requires a certain dependency to compile but then the corresponding code is not actually needed, but these will be rare.

On the other hand, including runtime dependencies that are not needed at compile-time is very common. For instance, if you're writing a Java EE 6 application, you compile against the Java EE 6 API, but at runtime, any Java EE container can be used; it's this container that provides the implementation.

Compile-time dependencies can be avoided by using reflection. For instance, a JDBC driver can be loaded with a Class.forName and the actual class loaded be configurable through a configuration file
===================================================================================================================
Abstract class vs Interface:-
=============================
The abstract class can inherit features from another concrete or abstract class, and can enrich further behavior while adding interfaces.
interfaces cannot be instantiated.
An interface does not contain any constructors.
All of the methods in an interface are abstract.
An interface is not extended by a class; it is implemented by a class.
An interface can extend multiple interfaces.
A class can implement more than one interface at a time.
A class can extend only one class, but implement many interfaces.
An interface can extend another interface, in a similar way as a class can extend another class.

===================================================================================================================
Thread per connection vs Thread per Request:-
=============================================

Thread-per-request scales better than thread-per-connection.
Java threads are rather expensive, typically using a 1Mb memory segment each, whether they are active or idle. If you give each connection its own thread, the thread will typically sit idle between successive requests on the connection. Ultimately the framework needs to either stop accepting new connections ('cos it can't create any more threads) or start disconnecting old connections (which leads to connection churn if / when the user wakes up).
HTTP connection requires significantly less resources than a thread stack, although there is a limit of 64K open connections per IP address, due to the way that TCP/IP works.
By contrast, in the thread-per-request model, the thread is only associated while a request is being processed. That usually means that the service needs fewer threads to handle the same number of users. And since threads use significant resources, that means that the service will be more scalable.
(And note that thread-per-request does not mean that the framework has to close the HTTP connection after each request ...)
Having said that, the thread-per-request model is not ideal when there are long pauses during the processing of each request. (And it is especially non-ideal when the service uses the comet approach which involves keeping the reply stream open for a long time.) To support this, the Servlet 3.0 spec provides an "asynchronous servlet" mechanism which allows a servlet's request method to suspend its association with the current request thread. This releases the thread to go and process another request.
If the web application can be designed to use the "asynchronous" mechanism, it is likely to be more scalable than either thread-per-request or thread-per-connection.

FOLLOWUP:-
Let's assume a single webpage with 1000 images. This results in 1001 HTTP requests. Further let's assume HTTP persistent connections is used. With the TPR strategy, this will result in 1001 thread pool management operations (TPMO). With the TPC strategy, this will result in 1 TPMO... Now depending on the actual costs for a single TPMO, I can imagine scenarios where TPC may scale better then TPR.
I think there are some things you haven't considered:
The web browser faced with lots of URLs to fetch to complete a page may well open multiple connections.
With TPC and persistent connections, the thread has to wait for the client to receive the response and send the next request. This wait time could be significant if the network latency is high.
The server has no way of knowing when a given (persistent) connection can be closed. If the browser doesn't close it, it could "linger", tying down the TPC thread until the server times out the connection.
The TPMO overheads are not huge, especially when you separate the pool overheads from the context switch overheads. (You need to do that, since TPC is going to incur context switches on a persistent connections; see above.)
My feeling is that these factors are likely to outweigh the TPMO saving of having one thread dedicated to each connection.
==
Thread per request will create a thread for each HTTP Request the server receives .
Thread per connection will reuse the same HTTP Connection from multiple requests(keep-alive) .AKA HTTP persistent connection but please note that this supported only from HTTP 1.1
Thread Per Request is faster as most web container use Thread Pooling.
The number of maximum parallel connections you should set on the number of cores on your server. More cores => more parallel threads .




https://blog.idrsolutions.com/2015/01/java-8-default-methods-explained-5-minutes/
https://dzone.com/articles/concurrenthashmap-in-java8
lambda expressions: It is an anonymous function that allows you to pass methods as arguments or simply, a mechanism that helps you remove a lot of boilerplate code.They have no access modifier(private, public or protected), no return type declaration and no name.


Tomcat8.exe //TS// ++JvmOptions -Dwfm.keyStore="%ID_DSP_HOME%\certs\serviceKeystore.j

Hadoop interview questions:-
==========================
1. Understand vision - how the data will be used
2. Get data growth rate
3. Understand how future-proofed your solution should be - 2 years, 3 years etc
4. Assumed disk space on commodity hardware
5. Assumed replication factor - default of 3
6. Calculate the disk space for the projected years
7. Add 30% extra to the space calculation to allow for hadoop machiner usage for MR and other aspects
8. Factor in NN server requirement and HA of the same
9. Factor in JT server requirements and HA of the same
10. Factor in Zookeeper requirement and HA of the same
11. Decide format of date storage - text file, sequence file/AVRO/RCFile/Compression & codec - although this might impact space requirement - minimize it
12. Factor in HBase master server requirement and HA of the same if HBase is to run
13. Factor in racks/switches
14. Factor in number of environments - dev/test/QA/prod parallel/production..and cluster size
15. Plan out users/groups/authentication/authorization and any data encryption needed.
16. Plan the load tasks, and data integrity checks


===================================================================================
 Write a program to find the minimum node element in a Linked List.
2.  You were given a list of meeting  and their timings, Write a program to find out the minimum number of conference rooms required without overlapping the meetings. // I think that's the zeist of the questions, it was litter longer though
3.  The following program increases/decreases the value of A and B until A is equal to X and B is equal to Y. Find the bug:
public static void MakeTheNumbersMatch(int a, int b, int x, int y)
    {
        while(a!=x && b!=y)
        {
            if(a> x)
            {
                a--;
            }
            else
            {
                a++;
            }
            if(b>y)
            {
                b--;
            }
            else
            {
                b++;
            }
        }
    }
1. Find square root of number without using sqrt function
2. Given a directed graph. Construct another graph from given graph such that if path exists from vertices A to vertices B and from B to C, then path from A to C and from C to A also should exists.
3. Write function which takes array of elements A and array of elements B and outputs (A-B)U(B-A).
4. Implement hashmap on your own. Write good hashing function for string.
===============================================================================
https://dgeekspot.wordpress.com/2015/11/18/9-programming-questions-interviewers-love-to-ask/
https://www.interviewcake.com/google-interview-questions
http://www.geeksforgeeks.org/tag/microsoft/

http://bigocheatsheet.com/
http://javaconceptoftheday.com/big-o-notations-tutorials/
http://javapapers.com/core-java/address-of-a-java-object/

http://www.codenlearn.com/2011/10/simple-merge-sort.html
http://www.codenlearn.com/p/table-of-contents.html
https://examples.javacodegeeks.com/core-java/quicksort-algorithm-in-java-code-example/

================================================================================
Ques1: WAP to merge 3 sorted array 
Ques2: they gave a linked list code and we have to identify the bug in it and write the correct code 
Ques3: Something about tree traversal
===============================================================================
(1) A function to compute minimum of unsorted numbers in an array of size N. this is a simple loop to find the min. How many times the assignment is executed? 
(2) Find and fix the bugs - this function is to remove head of a singly linked list. 
void RemoveHead(node * head) 
{ 
free(head); 
head = head->next; 
} 
(3) Design a printserver. (there were some criteria)
=================================================================================
A@u98952345 for an object.That is the object name and System.identityHashCode() separated by the '@' character. What the identity hash code represents is implementation-specific. It often is the initial memory address of the object, but the object can be moved in memory by the VM over time. So (briefly) you can't rely on it being anything.
Getting the memory addresses of variables is meaningless within Java, since the JVM is at liberty to implement objects and move them as it seems fit (your objects may/will move around during garbage collection etc.)
Integer.toBinaryString() will give you an integer in binary form.
==================================================================================
https://careers.microsoft.com/help/studentinterview
You have two intersecting linked lists. Describe a function that returns a pointer to the node where they intersect. 
Traverse a binary tree using recursion (and later, iteration)
"Cracking the Coding Interview" 

https://careers.microsoft.com/help/interview
https://www.glassdoor.com/Interview/Microsoft-Software-Development-Engineer-Interview-Questions-EI_IE1651.0,9_KO10,39.htm
https://www.glassdoor.com/Interview/Microsoft-Software-Development-Engineer-II-Interview-Questions-EI_IE1651.0,9_KO10,42.htm
https://www.glassdoor.com/Interview/Microsoft-Interview-Questions-E1651.htm?filter.jobTitleExact=Software+Development+Engineer+%28SDE%29+II
https://www.glassdoor.com/Interview/Microsoft-Software-Development-Engineer-I-Interview-Questions-EI_IE1651.0,9_KO10,41.htm


Martin Fowler defines Microservices as a subset of Service Oriented Architecture (SOA). It sounds like this is what you have potentially.icroservices are just more granular (and decoupled) varieties of the web services most places have to provide a little more control on the Ops side of the world.
A web service is service which exposes an API over HTTP (although when people say web service they often mean something with a SOAP API, which ironically has very little to do with the web). A microservice is an independently deployable service modelled around a business domain. people build microservices using messaging or event-driven APIs, or using non-HTTP backed RPC mechanisms. So I could have a microservice which is also a webservice, but a webservice might not be a microservice, and a microservice might not be a webservice

given a binary tree and given a level,write a routine to print all the values of the tree nodes in that level

http://www.cs.utah.edu/~chu/html/programming/java/java_online_store_down.htm

java security:-
http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html
http://docs.oracle.com/javase/7/docs/technotes/guides/security/




Senior Software Engineer



Given a set S of n real numbers and another real number x, determine whether or not there exist. two elements in S whose sum is exactly x.


Given a list of numbers (a fixed list) and another list, write a function which determines whether any element in the second list appears in the fixed list.


use a trie data structure to store words. every node contains a list of all letters (pointers to the same node structure) and flags for each letter to indicate the length of the word. Write a method to insert into this kind of data structure. What would you use to store each node? 

(Step-1): You should have practical understanding of the Algorithms (e.g. When to use BackTracking, When to Use Divide and Conquer, Why double hashing required?, Where brute force concept can be applied?) (50 Hours).



(Step-2): You should have practical understanding of Data Structures e.g. (Practical use cases related to :when to use circular buffer , or when to use adjacently list or the combination of both or something else to solve the problem ).
(50 Hours)



(Step-3) : You must practice several coding problems to implement the things which learn from Step-1 , and Step-2 (you may do the following choose any coding language for the choice of yours (C, C++ or Java or Python or PHP or any one else ).
(50 Hours)


(Step-4): Solving the problem doesn't mean just to solve it, but to understand the best way to solve it e.g. The given technical problem can use various ways to come to solution, and you might want to use the optimal one. (How you connect the given solution with the computing/memory resources e.g. Memory/Processing Power) 


dynamic programming, greedy algorithms

https://www.reddit.com/r/cscareerquestions/comments/3hvnxr/microsoft_onsite_hiring_event/

=========================================================================
http://tsiege.github.io/blog/2014/05/02/tech-interview-cheat-sheet/  - IMPORTANT
http://bigocheatsheet.com/

=============================================================================================================

https://www.udacity.com/course/intro-to-algorithms--cs215
http://mydailyjava.blogspot.com/2013/12/sunmiscunsafe.html?_sm_au_=iFV5R27s6vnPtFQR
https://dzone.com/articles/understanding-sunmiscunsafe
=============================================================================================================
https://javarevisited.blogspot.com/2012/06/20-design-pattern-and-software-design.html?_sm_au_=i6VN3ndTPrZW0BNH
http://www.bullraider.com/java/java-oo-design/interview-qustions/264-java-design-pattern-interview-questions-part-1	
==============================================================================


https://www.coursera.org/learn/algorithm-design-analysis/home/week/1
https://www.coursera.org/learn/algorithm-design-analysis-2/home/week/1
https://www.coursera.org/learn/developer-iot

https://www.coursera.org/learn/introduction-to-algorithms
https://www.coursera.org/learn/java-data-structures-algorithms-2/home/welcome

https://www.coursera.org/learn/comparch/home/week/1

https://www.coursera.org/learn/cloud-computing
https://www.coursera.org/learn/cloud-computing-2

https://www.coursera.org/learn/cloud-applications-part1
https://www.coursera.org/learn/cloud-applications-2
https://www.coursera.org/learn/cloud-networking
https://www.coursera.org/learn/cloud-computing-capstone


1) Rotate Array, Reverse Words in a String
2) Evaluate Reverse Polish Notation (Stack)
3) Isomorphic Strings
4) Word Ladder (BFS), Word Ladder II (BFS)
5) Median of Two Sorted Arrays
5) Kth Largest Element in an Array
6) Wildcard Matching, Regular Expression Matching
7) Merge Intervals, Insert Interval
9) Two Sum, Two Sum II, Two Sum III, 3Sum, 4Sum
10) 3Sum Closest
11) String to Integer
12) Merge Sorted Array
13) Valid Parentheses
13) Longest Valid Parentheses
14) Implement strStr()
15) Minimum Size Subarray Sum
16) Search Insert Position
17) Longest Consecutive Sequence
18) Valid Palindrome
19) ZigZag Conversion
20) Add Binary 
21) Length of Last Word
22) Triangle
24) Contains Duplicate: I, II, III
25) Remove Duplicates from Sorted Array: I, II, Remove Element , Move Zeroes
27) Longest Substring Without Repeating Characters
28) Longest Substring that contains 2 unique characters [Google]
28) Substring with Concatenation of All Words
29) Minimum Window Substring
31) Find Minimum in Rotated Sorted Array: I, II
32) Search in Rotated Array:I, II
33) Min Stack
34) Majority Element: I, II
35) Bulls and Cows 
36) Largest Rectangle in Histogram
37) Longest Common Prefix [Google]
38) Largest Number
39) Simplify Path
40) Compare Version Numbers
41) Gas Station
44) Pascal's Triangle: I, II
45) Container With Most Water
45) Candy [Google]
45) Trapping Rain Water
46) Count and Say
47) Search for a Range
48) Basic Calculator, Basic Calculator II
49) Group Anagrams
50) Shortest Palindrome
51) Rectangle Area
52) Summary Ranges
53) Increasing Triplet Subsequence
54) Get Target Using Number List And Arithmetic Operations 
55) Reverse Vowels of a String 
56) Flip Game, Flip Game II
57) Missing Number, Find the duplicate number, First Missing Positive 
58) Valid Anagram, Group Shifted Strings
59) Top K Frequent Elements
60) Find Peak Element
61) Word Pattern, Word Pattern II
62) H-Index , H-Index II
63) Palindrome Pairs
64) One Edit Distance
65) Scramble String
66) First Bad Version
67) Integer to English Words
68) Text Justification 
69) Remove Invalid Parentheses
70) Intersection of Two Arrays, Intersection of Two Arrays II
71) Sliding Window Maximum, Moving Average from Data Stream
72) Guess Number Higher or Lower

2. Matrix

Common methods to solve matrix related problem include DFS, BFS, dynamic programming, etc.

Classic Problems:
1) Set Matrix Zeroes
2) Spiral Matrix
2) Spiral Matrix II
3) Search a 2D Matrix
3) Search a 2D Matrix II
4) Rotate Image [Palantir]
5) Valid Sudoku 
6) Minimum Path Sum (DP) [Google]
7) Unique Paths (DP) [Google]
7) Unique Paths II (DP)
8) Number of Islands (DFS/BFS), Number of Islands II (Disjoint Set), Number of Connected Components in an Undirected Graph
9) Surrounded Regions (BFS)
10) Maximal Rectangle
10) Maximal Square
11) Word Search (DFS)
11) Word Search II
13) Range Sum Query 2D – Immutable
14) Longest Increasing Path in a Matrix (DFS)
15) Shortest Distance from All Buildings
16) Game of Life
17) Paint House, Paint House II
18) Sudoku Solver (DFS)
19) Walls and Gates (DFS/BFS)
20) Tic-Tac-Toe
21) Best Meeting Point

Classic Problems:
0) Implement a Stack Using an Array
1) Add Two Numbers
2) Reorder List
3) Linked List Cycle
4) Copy List with Random Pointer
5) Merge Two Sorted Lists
6) Odd Even Linked List
7) Remove Duplicates from Sorted List
7) Remove Duplicates from Sorted List II
8) Partition List
9) LRU Cache
10) Intersection of Two Linked Lists
11) Remove Linked List Elements
12) Swap Nodes in Pairs
13) Reverse Linked List, Reverse Linked List II, Print Linked List in Reversed Order
14) Remove Nth Node From End of List (Fast-Slow Pointers)
15) Implement Stack using Queues
15) Implement Queue using Stacks
16) Palindrome Linked List
17) Implement a Queue using an Array
18) Delete Node in a Linked List
19) Reverse Nodes in k-Group

4.1 Tree

1) Binary Tree Traversal:

Preorder, Inorder, Postorder, Level Order, Level Order II, Vertical Order
2) Invert Binary Tree
3) Kth Smallest Element in a BST
4) Binary Tree Longest Consecutive Sequence
5) Validate Binary Search Tree
6) Flatten Binary Tree to Linked List
7) Path Sum (DFS or BFS)
7) Path Sum II (DFS) 
8) Construct Binary Tree from Inorder and Postorder Traversal
8) Construct Binary Tree from Preorder and Inorder Traversal
9) Convert Sorted Array to Binary Search Tree [Google]
10) Convert Sorted List to Binary Search Tree [Google]
11) Minimum Depth of Binary Tree
12) Binary Tree Maximum Path Sum *
13) Balanced Binary Tree
14) Symmetric Tree
15) Binary Search Tree Iterator 
16) Binary Tree Right Side View
17) Lowest Common Ancestor of a Binary Search Tree
18) Lowest Common Ancestor of a Binary Tree
19) Verify Preorder Serialization of a Binary Tree
20) Populating Next Right Pointers in Each Node 
21) Populating Next Right Pointers in Each Node II 
21) Unique Binary Search Trees (DP)
21) Unique Binary Search Trees II (DFS)
22) Sum Root to Leaf Numbers (DFS)
23) Count Complete Tree Nodes 
24) Closest Binary Search Tree Value
25) Binary Tree Paths
26) Maximum Depth of Binary Tree
27 Recover Binary Search Tree
28) Same Tree
29) Serialize and Deserialize Binary Tree
30) Inorder Successor in BST
31) Find Leaves of Binary Tree
32) Largest BST Subtree

4.2 Heap

1) Merge k sorted arrays [Google]
2) Merge k Sorted Lists *
3) Find Median from Data Stream
4) Meeting Rooms II, Meeting Rooms
5) Range Addition

4.3 Trie

1) Implement Trie (Prefix Tree)
2) Add and Search Word - Data structure design (DFS)

4.4 Segment Tree

1) Range Sum Query - Mutable
2) The Skyline Problem

Sorting

1) Mergesort
2) Quicksort
3) InsertionSort.
4) Maximum Gap (Bucket Sort)
5) Sort Colors (Counting Sort)


Design a game of battleship
Design a game of Boggle
Design a traffic light system for one intersection
Copy contents of one link list to another where the destination node size is different than the original node size but overall link list size is same. Don't worry about space allocation. 

Write a function to calculate build order given a project with a list of dependencies that also need to be built  
Write a program to generate a "Unique Ticket" for each request. The number of requests could be quite large - up to a million per second

write code to convert text to variable length bit encoding similar to Huffman coding. 
Determine frequency of occurrence for each letter in the text assign it a bit code so that more frequent characters get shorter bit codes.  
Design an algorithm to find K biggest numbers in the array.
b. Design an algorithm to find a shortest path between two given words of same lengths so that every word differs from preceding and succeeding word in the path by exactly one character.
c. Design a system that processes events in real time.  
Write code that will return the nth digit of the Fibonacci sequence.
Write code that will take a string of numbers (12,345) and return the spoken word version of the number (twelve thousand three hundred forty five).
Write code that will validate a binary search tree.  
How to sort multiple arrays gigabytes in size
How to organize an airport
What is quicksort
How to find the best score going through a mystery book where each page has a score and different options for the next page until the end  

